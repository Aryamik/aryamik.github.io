---
title: "Can Data Explain my Musical Tastes?"
#description: "blog post description (appears underneath the title in smaller text) which is included on the listing page"
author:
  - name: Aryamik Sharma
    url: https://aryamik.github.io
date: 09-07-2024
categories: 
- Data 

# self-defined categories

draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
editor: 
  markdown: 
    wrap: 72
---

As the title says, is there a pattern to my musical tastes? Do the

```         
```

y have something in common?

```{python}
from pprint import pprint
import json
import numpy as np
import pandas as pd
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import requests
import base64
import json

# Visualization
%matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns 


# Set up your Spotify API credentials
CLIENT_ID='89c6ff8067fc46358b32423f68b74c3e'
CLIENT_SECRET='b1d9fd0dee9c4f5cb8c303fc944e8148'
REDIRECT_URI = 'http://localhost:1410/'
SCOPE = 'user-top-read'
```

```{python}
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET,
    redirect_uri=REDIRECT_URI,
    scope=SCOPE
))

# Fetch the top 50 tracks
def get_top_tracks(limit=50):
    results = sp.current_user_top_tracks(limit=limit, time_range='medium_term')
    top_tracks = results['items']
    tracklist = {}
    for track in top_tracks:
        track_id = track['id']  # Use track ID to get audio features
        track_name = track['name']
        track_uri = track['uri']
        artist_name = track['artists'][0]['name']  # Get the artist's name
        duration_ms = track['duration_ms']  # Get track duration in milliseconds
        tracklist[track_id] = {
            'title': track_name,
            'uri': track_uri,
            'artist': artist_name,
            'duration_ms': duration_ms
        }
    return tracklist

# Get all audio features for the list of tracks
def get_audio_features_dict(full_tracklist):
    audio_features_dict = {}
    track_ids = list(full_tracklist.keys())
    features = sp.audio_features(track_ids)
    for idx, track_id in enumerate(track_ids):
        if features[idx] is not None:
            audio_features_dict[track_id] = {
                'danceability': features[idx]['danceability'],
                'energy': features[idx]['energy'],
                'key': features[idx]['key'],
                'loudness': features[idx]['loudness'],
                'mode': features[idx]['mode'],
                'speechiness': features[idx]['speechiness'],
                'acousticness': features[idx]['acousticness'],
                'instrumentalness': features[idx]['instrumentalness'],
                'liveness': features[idx]['liveness'],
                'valence': features[idx]['valence'],
                'tempo': features[idx]['tempo'],
                'time_signature': features[idx]['time_signature']
            }
        else:
            audio_features_dict[track_id] = {
                'danceability': None,
                'energy': None,
                'key': None,
                'loudness': None,
                'mode': None,
                'speechiness': None,
                'acousticness': None,
                'instrumentalness': None,
                'liveness': None,
                'valence': None,
                'tempo': None,
                'time_signature': None
            }
    return audio_features_dict

# Retrieve top tracks and their audio features
top_tracks = get_top_tracks()
audio_features = get_audio_features_dict(top_tracks)

# Combine track info and audio features into a DataFrame
data = []
for track_id, track_info in top_tracks.items():
    features = audio_features.get(track_id, {})
    duration_sec = track_info.get('duration_ms', 0) / 1000  # Convert duration to seconds
    minutes = int(duration_sec // 60)
    seconds = int(duration_sec % 60)
    data.append({
        'title': track_info.get('title'),
        'uri': track_info.get('uri'),
        'artist': track_info.get('artist'),
        'duration': f"{minutes}:{seconds:02d}",  # Format duration as MM:SS
        'danceability': features.get('danceability'),
        'energy': features.get('energy'),
        'key': features.get('key'),
        'loudness': features.get('loudness'),
        'mode': features.get('mode'),
        'speechiness': features.get('speechiness'),
        'acousticness': features.get('acousticness'),
        'instrumentalness': features.get('instrumentalness'),
        'liveness': features.get('liveness'),
        'valence': features.get('valence'),
        'tempo': features.get('tempo'),
        'time_signature': features.get('time_signature')
    })

# Create a DataFrame
df = pd.DataFrame(data)

# Print DataFrame
print(df)
```
